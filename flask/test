import numpy as np
from PIL import Image
from tensorflow.keras.models import load_model
from tensorflow.keras.layers import Layer
from keras.saving import register_keras_serializable
import tensorflow.keras.backend as K
import tensorflow as tf

# Кастомный слой для модели
@register_keras_serializable()
class CTCLayer(Layer):
    def __init__(self, name=None, **kwargs):
        super().__init__(name=name, **kwargs)

    def call(self, y_true, y_pred):
        y_true = tf.cast(y_true, dtype="int64")
        input_length = tf.reduce_sum(tf.ones_like(y_pred[:, :, 0]), axis=1)
        label_length = tf.reduce_sum(tf.cast(tf.not_equal(y_true, -1), dtype="int64"), axis=1)
        loss = K.ctc_batch_cost(y_true, y_pred, input_length, label_length)
        self.add_loss(loss)
        return y_pred

# Путь к модели
MODEL_PATH = "ocr_captcha_model.keras"

# Загрузка модели
try:
    print("Загрузка модели...")
    model = load_model(MODEL_PATH, custom_objects={"CTCLayer": CTCLayer})
    print("Модель успешно загружена.")
except Exception as e:
    print(f"Ошибка загрузки модели: {e}")
    model = None

# Функция для распознавания капчи
def solve_captcha(image_path):
    if model is None:
        print("Модель не загружена. Невозможно решить капчу.")
        return None

    try:
        # Загрузка и предобработка изображения
        image = Image.open(image_path).convert("L")  # Перевод в чёрно-белое
        image = image.resize((128, 64))  # Изменение размера
        image_array = np.array(image) / 255.0  # Нормализация
        image_array = np.expand_dims(image_array, axis=0)  # Добавляем размерность

        # Предсказание
        prediction = model.predict(image_array)

        # Постобработка предсказания
        decoded, _ = K.ctc_decode(prediction, input_length=np.ones(prediction.shape[0]) * prediction.shape[1])
        captcha_text = "".join([chr(char) for char in decoded[0][0].numpy() if char != -1])
        return captcha_text
    except Exception as e:
        print(f"Ошибка при решении капчи: {e}")
        return None
